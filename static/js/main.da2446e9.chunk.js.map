{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["roundTo","require","FareCalculator","props","state","distance","drivingTime","waitTime","additionalStopsExtraPassengers","distanceCost","drivingCost","waitingCost","extraCost","subTotal","tax","total","handleInputChange","bind","document","title","event","target","value","name","this","setState","updateValues","calculateDistanceCost","calculateWaitTime","calculateAdditionalCosts","calculateSubTotal","calculateTax","updateTotals","calculateTotal","Container","Form","Row","Col","Label","Control","type","onChange","readOnly","Text","className","displayType","prefix","decimalScale","fixedDecimalScale","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da2446e9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Container, Row, Col, Form} from \"react-bootstrap\";\nimport NumberFormat from 'react-number-format';\n\nimport './App.css';\n\nconst roundTo = require('round-to');\n\nexport class FareCalculator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            distance: false,\n            drivingTime: false,\n            waitTime: false,\n            additionalStopsExtraPassengers: false,\n            distanceCost: 0,\n            drivingCost: 0,\n            waitingCost: 0,\n            extraCost: 0,\n            subTotal: 0,\n            tax: 0,\n            total: 0,\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    componentDidMount(){\n        document.title = \"Fare Calculator\";\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        }, () => this.updateValues());\n    }\n\n    updateValues() {\n        this.calculateDistanceCost();\n        this.calculateWaitTime();\n        this.calculateAdditionalCosts();\n    }\n\n    updateTotals() {\n        this.calculateSubTotal();\n        this.calculateTax();\n    }\n\n    calculateDistanceCost() {\n        var distanceCost = 5.65;\n        if (this.state.distance > 2) {\n            distanceCost += (this.state.distance - 2) * 1.4;\n        }\n        this.setState({ distanceCost: distanceCost }, () => this.updateTotals());\n    }\n\n    calculateWaitTime() {\n        this.setState({ waitingCost: this.state.waitTime * 0.25}, () => this.updateTotals());\n    }\n\n    calculateAdditionalCosts() {\n        this.setState({ extraCost: this.state.additionalStopsExtraPassengers * 2}, () => this.updateTotals());\n    }\n\n    calculateSubTotal() {\n        this.setState({ subTotal: roundTo(this.state.distanceCost + this.state.drivingCost + this.state.waitingCost + this.state.extraCost, 2)}, () => this.calculateTax());\n    }\n\n    calculateTax() {\n        this.setState({ tax: roundTo(this.state.subTotal * 0.15, 2)}, () => this.calculateTotal());\n    }\n\n    calculateTotal() {\n        this.setState({total: this.state.subTotal + this.state.tax});\n    }\n\n    render() {\n        return(\n            <div>\n                <Container>\n                    <Form>\n                        <Form.Row>\n                            <Col>\n                                <Form.Label>Distance (km)</Form.Label>\n                                <Form.Control type=\"number\" name=\"distance\" onChange={this.handleInputChange} />\n                            </Col>\n                            <Col>\n                                <Form.Label>Distance + Base Cost:</Form.Label>\n                                <Form.Control type=\"number\" readOnly value={this.state.distanceCost} onChange={this.handleInputChange} />\n                                <Form.Text>$5.65 base rate, $1.40 per km</Form.Text>\n                            </Col>\n                        </Form.Row>\n                        <Form.Row>\n                            <Col>\n                                <Form.Label>Wait time (minutes)</Form.Label>\n                                <Form.Control type=\"number\" name=\"waitTime\" onChange={this.handleInputChange} />\n                            </Col>\n                            <Col>\n                                <Form.Label>Waiting cost ($0.25/min):</Form.Label>\n                                <Form.Control type=\"number\" readOnly value={this.state.waitingCost} onChange={this.handleInputChange} />\n                            </Col>\n                        </Form.Row>\n                        <Form.Row>\n                            <Col>\n                                <Form.Label>Extra stops / passengers</Form.Label>\n                                <Form.Control type=\"number\" name=\"additionalStopsExtraPassengers\" onChange={this.handleInputChange} />\n                            </Col>\n                            <Col>\n                                <Form.Label>Additional Costs:</Form.Label>\n                                <Form.Control type=\"number\" readOnly value={this.state.extraCost} onChange={this.handleInputChange} />\n                                <Form.Text>$2 per stop/extra passenger</Form.Text>\n                            </Col>\n                        </Form.Row>\n                    </Form>\n                </Container>\n                <Container>\n                    <Row>\n                        <Col>\n                            <Form.Label className={\"subtotal\"}>Subtotal: </Form.Label>\n                        </Col>\n                        <Col>\n                            <NumberFormat value={this.state.subTotal} displayType={'text'} prefix={'$'} decimalScale={'2'} fixedDecimalScale={true} className={\"subtotal\"} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Form.Label className={\"subtotal\"}>Tax: </Form.Label>\n                        </Col>\n                        <Col>\n                            <NumberFormat value={this.state.tax} displayType={'text'} prefix={'$'} decimalScale={'2'} fixedDecimalScale={true} className={\"subtotal\"} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Form.Label className={\"total\"}>Total: </Form.Label>\n                        </Col>\n                        <Col>\n                            <NumberFormat value={this.state.total} displayType={'text'} prefix={'$'} decimalScale={'2'} fixedDecimalScale={true} className={\"total\"}/>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { FareCalculator } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<FareCalculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}